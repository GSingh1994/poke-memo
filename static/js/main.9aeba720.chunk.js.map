{"version":3,"sources":["Components/Cards.jsx","Components/ScoreBoard.jsx","Components/Footer.jsx","Components/Header.jsx","assets/pika.gif","App.js","index.js"],"names":["Cards","sprite","name","id","saveCard","useState","inProp","setInProp","className","onClick","CSSTransition","in","timeout","classNames","src","alt","ScoreBoard","userScore","gameOver","localScore","setLocalScore","useEffect","localStorageTuNum","parseInt","localStorage","getItem","setHighScore","highScore","setItem","type","Footer","Header","window","location","reload","App","pokeData","setPokeData","lastIndex","setLastIndex","clickedCards","setClickedCards","setUserScore","setGameOver","loader","setLoader","cardGrid","setCardGrid","a","i","fetch","response","json","data","preData","fetchUrl","loaderTimer","setTimeout","clearTimeout","slice","includes","preCards","sort","Math","random","preIndex","preScore","loaderGif","style","pointerEvents","map","pokemon","sprites","front_default","forms","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9aeba720.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\n\nexport default function Cards({ sprite, name, id, saveCard }) {\n  const [inProp, setInProp] = useState(false);\n\n  return (\n    <div className=\"cards\" onClick={() => setInProp(true)}>\n      <CSSTransition in={inProp} timeout={200} classNames=\"my-node\">\n        <div\n          id=\"Cards\"\n          className=\"nes-pointer nes-container with-title is-centered is-rounded\"\n          onClick={() => saveCard(id)}\n        >\n          <p className=\"title\">{name}</p>\n          <img className=\"sprite\" src={sprite} alt=\"\" />\n        </div>\n      </CSSTransition>\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\n\nexport default function ScoreBoard({ userScore, gameOver }) {\n  const [localScore, setLocalScore] = useState(0);\n  useEffect(() => {\n    const localStorageTuNum = parseInt(localStorage.getItem(\"highScore\"));\n    setLocalScore(localStorageTuNum || 0); //Setting highScore from localStorage if possible\n\n    setHighScore(localScore);\n  }, []);\n\n  const [highScore, setHighScore] = useState(0);\n  useEffect(() => {\n    if (userScore > localScore) {\n      setHighScore(userScore);\n      localStorage.setItem(\"highScore\", userScore); //set new highScore on gameOver\n    }\n  }, [gameOver]);\n\n  return (\n    <div className=\"ScoreBoard\">\n      <button type=\"button\" className=\"nes-btn is-primary\">\n        {!gameOver ? (\n          <h2 className=\"userScore\">Score:{userScore}</h2>\n        ) : (\n          <h2 className=\"gameOver\">{gameOver ? \"GAME OVER\" : null}</h2>\n        )}\n        <h2>\n          HighScore:\n          {highScore > localScore ? highScore : localScore || 0}\n        </h2>\n      </button>\n    </div>\n  );\n}\n","export default function Footer() {\n  return (\n    <div className=\"Footer\">\n      <div>Made with </div> <i className=\"nes-icon heart\"></i>\n    </div>\n  );\n}\n","export default function Header({ gameOver }) {\n  return (\n    <header>\n      <div className=\"nes\">\n        <i className=\"nes-ash\"></i>\n        <div className=\"nes-balloon from-left\">Help me find new pokemons</div>\n      </div>\n\n      <div className=\"title\">\n        <h1>PokeCards</h1>\n        <h6>Gotta Catch 'Em All</h6>\n      </div>\n      <i\n        className={\n          gameOver ? \"vibrate nes-pointer nes-pokeball\" : \"nes-pokeball\"\n        }\n        onClick={() => window.location.reload()}\n      ></i>\n    </header>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/pika.a937902d.gif\";","import { useState, useEffect } from \"react\";\nimport Cards from \"./Components/Cards\";\nimport ScoreBoard from \"./Components/ScoreBoard\";\nimport Footer from \"./Components/Footer\";\nimport Header from \"./Components/Header\";\nimport \"../node_modules/nes.css/css/nes.min.css\";\nimport \"./App.scss\";\nimport loaderGif from \"./assets/pika.gif\";\n\nexport default function App() {\n  const [pokeData, setPokeData] = useState([]);\n  const [lastIndex, setLastIndex] = useState(0);\n  const [clickedCards, setClickedCards] = useState([]);\n  const [userScore, setUserScore] = useState(-1);\n  const [gameOver, setGameOver] = useState(false);\n  const [loader, setLoader] = useState(true);\n  const [cardGrid, setCardGrid] = useState([]);\n\n  useEffect(() => {\n    const fetchUrl = async () => {\n      for (let i = 1; i < 100; i += 1) {\n        let response = await fetch(`https://pokeapi.co/api/v2/pokemon/${i}/`);\n        const data = await response.json();\n        setPokeData((preData) => [...preData, data]);\n      }\n    };\n    fetchUrl();\n    const loaderTimer = setTimeout(() => setLoader(false), 1000); //Pikachu gif timer\n    return () => clearTimeout(loaderTimer);\n  }, []);\n\n  //taking a slice of pokeData\n  useEffect(\n    () => setCardGrid(pokeData.slice(lastIndex, lastIndex + 10)),\n    [pokeData, clickedCards]\n  );\n\n  const saveCard = (id) => {\n    clickedCards.includes(id)\n      ? setGameOver(true)\n      : setClickedCards([...clickedCards, id]); //save card's id only if it's unique otherwise GAMEOVER\n  };\n\n  useEffect(() => {\n    setCardGrid((preCards) => preCards.sort(() => Math.random() - 0.5)); //shuffle gridCard array\n    setLastIndex((preIndex) => (preIndex += 0.5));\n    gameOver ? setUserScore(0) : setUserScore((preScore) => (preScore += 1));\n  }, [gameOver, clickedCards]);\n\n  return !loader ? (\n    <div className=\"App\">\n      <Header gameOver={gameOver} />\n      <ScoreBoard userScore={userScore} gameOver={gameOver} />\n      <main\n        className=\"container\"\n        style={gameOver ? { pointerEvents: \"none\" } : null}\n      >\n        {cardGrid.map((pokemon) => (\n          <Cards\n            key={pokemon.id}\n            id={pokemon.id}\n            sprite={pokemon.sprites.front_default}\n            name={pokemon.forms[0].name}\n            saveCard={saveCard}\n          />\n        ))}\n      </main>\n      <Footer />\n    </div>\n  ) : (\n    <div className=\"loader\">\n      <img src={loaderGif} alt=\"happy-pikachu\" />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}