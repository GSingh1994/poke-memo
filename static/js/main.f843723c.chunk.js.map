{"version":3,"sources":["Components/Cards.jsx","Components/ScoreBoard.jsx","Components/Footer.jsx","Components/Header.jsx","App.js","index.js"],"names":["Cards","sprite","name","id","saveCard","className","onClick","src","alt","ScoreBoard","userScore","gameOver","useState","localScore","setLocalScore","useEffect","localStorageTuNum","parseInt","localStorage","getItem","setHighScore","highScore","setItem","type","Footer","Header","window","location","reload","App","pokeData","setPokeData","lastIndex","setLastIndex","clickedCards","setClickedCards","setUserScore","setGameOver","cardGrid","setCardGrid","a","i","fetch","response","json","data","preData","fetchUrl","slice","includes","preCards","sort","Math","random","preIndex","preScore","style","pointerEvents","map","pokemon","sprites","front_default","forms","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f843723c.chunk.js","sourcesContent":["export default function Cards({ sprite, name, id, saveCard }) {\n  return (\n    <div className=\"cards\">\n      <div\n        id=\"Cards\"\n        className=\"nes-pointer nes-container with-title is-centered is-rounded\"\n        onClick={() => saveCard(id)}\n      >\n        <p className=\"title\">{name}</p>\n        <img className=\"sprite\" src={sprite} alt=\"\" />\n      </div>\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\n\nexport default function ScoreBoard({ userScore, gameOver }) {\n  const [localScore, setLocalScore] = useState(0);\n  useEffect(() => {\n    const localStorageTuNum = parseInt(localStorage.getItem(\"highScore\"));\n    setLocalScore(localStorageTuNum || 0); //Setting highScore from localStorage if possible\n\n    setHighScore(localScore);\n  }, []);\n\n  const [highScore, setHighScore] = useState(0);\n  useEffect(() => {\n    if (userScore > localScore) {\n      setHighScore(userScore);\n      localStorage.setItem(\"highScore\", userScore); //set new highScore on gameOver\n    }\n  }, [gameOver]);\n\n  return (\n    <div className=\"ScoreBoard\">\n      <button type=\"button\" className=\"nes-btn is-primary\">\n        {!gameOver ? (\n          <h2 className=\"userScore\">Score:{userScore}</h2>\n        ) : (\n          <h2 className=\"gameOver\">{gameOver ? \"GAME OVER\" : null}</h2>\n        )}\n        <h2>\n          HighScore:\n          {highScore > localScore ? highScore : localScore || 0}\n        </h2>\n      </button>\n    </div>\n  );\n}\n","export default function Footer() {\n  return (\n    <div className=\"Footer\">\n      <div>Made with </div> <i className=\"nes-icon heart\"></i>\n    </div>\n  );\n}\n","export default function Header({ gameOver }) {\n  return (\n    <header>\n      <div className=\"nes\">\n        <i className=\"nes-ash\"></i>\n        <div className=\"nes-balloon from-left\">Help me find new pokemons</div>\n      </div>\n\n      <div className=\"title\">\n        <h1>PokeCards</h1>\n        <h6>Gotta Catch 'Em All</h6>\n      </div>\n      <i\n        className={\n          gameOver ? \"vibrate nes-pointer nes-pokeball\" : \"nes-pokeball\"\n        }\n        onClick={() => window.location.reload()}\n      ></i>\n    </header>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport Cards from \"./Components/Cards\";\nimport ScoreBoard from \"./Components/ScoreBoard\";\nimport Footer from \"./Components/Footer\";\nimport Header from \"./Components/Header\";\nimport \"../node_modules/nes.css/css/nes.min.css\";\nimport \"./App.scss\";\n\nexport default function App() {\n  const [pokeData, setPokeData] = useState([]);\n  const [lastIndex, setLastIndex] = useState(0);\n  const [clickedCards, setClickedCards] = useState([]);\n  const [userScore, setUserScore] = useState(-1);\n  const [gameOver, setGameOver] = useState(false);\n  const [cardGrid, setCardGrid] = useState([]);\n\n  useEffect(() => {\n    const fetchUrl = async () => {\n      for (let i = 1; i < 100; i += 1) {\n        let response = await fetch(`https://pokeapi.co/api/v2/pokemon/${i}/`);\n        const data = await response.json();\n        setPokeData((preData) => [...preData, data]);\n      }\n    };\n    fetchUrl();\n  }, []);\n\n  //taking a slice of pokeData\n  useEffect(\n    () => setCardGrid(pokeData.slice(lastIndex, lastIndex + 10)),\n    [pokeData, clickedCards]\n  );\n\n  const saveCard = (id) => {\n    clickedCards.includes(id)\n      ? setGameOver(true)\n      : setClickedCards([...clickedCards, id]); //save card's id only if it's unique otherwise GAMEOVER\n  };\n\n  useEffect(() => {\n    setCardGrid((preCards) => preCards.sort(() => Math.random() - 0.5)); //shuffle gridCard array\n    setLastIndex((preIndex) => (preIndex += 1));\n    gameOver ? setUserScore(0) : setUserScore((preScore) => (preScore += 1));\n  }, [gameOver, clickedCards]);\n\n  return (\n    <div className=\"App\">\n      <Header gameOver={gameOver} />\n      <ScoreBoard userScore={userScore} gameOver={gameOver} />\n      <main\n        className=\"container\"\n        style={gameOver ? { pointerEvents: \"none\" } : null} //Stop card selection on gameover\n      >\n        {cardGrid.map((pokemon) => (\n          <Cards\n            key={pokemon.id}\n            id={pokemon.id}\n            sprite={pokemon.sprites.front_default}\n            name={pokemon.forms[0].name}\n            saveCard={saveCard}\n          />\n        ))}\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}